
'use server';

/**
 * @fileOverview An AI agent that generates interactive stories for the user.
 *
 * - continueStory - A function that generates the next part of a story based on user choices.
 * - StoryInput - The input type for the continueStory function.
 * - StoryOutput - The return type for the continueStory function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const StoryHistorySchema = z.object({
    part: z.string().describe("A previous part of the story that was generated by the AI."),
    choice: z.string().describe("The choice the user made for that part of the story."),
});
export type StoryHistory = z.infer<typeof StoryHistorySchema>;

const StoryInputSchema = z.object({
  level: z.number().describe('The current level of the user.'),
  theme: z.string().describe("The overall theme of the story (e.g., 'Sci-Fi Adventure', 'Treasure Hunt')."),
  history: z.array(StoryHistorySchema).describe("The history of the story so far, including previous parts and the user's choices."),
});
export type StoryInput = z.infer<typeof StoryInputSchema>;

const StoryOutputSchema = z.object({
  storyPart: z
    .string()
    .describe('The next part of the story. This should be a few sentences long and end on a cliffhanger or a point of decision.'),
  choices: z
    .array(z.string())
    .length(2)
    .describe(
      'A list of exactly two different choices the user can make to continue the story.'
    ),
});
export type StoryOutput = z.infer<typeof StoryOutputSchema>;

export async function continueStory(input: StoryInput): Promise<StoryOutput> {
  return continueStoryFlow(input);
}

const prompt = ai.definePrompt({
  name: 'storyPrompt',
  input: {schema: StoryInputSchema},
  output: {schema: StoryOutputSchema},
  config: {
    model: 'googleai/gemini-1.5-pro-preview-0514'
  },
  prompt: `You are a master storyteller for an interactive adventure game called Impulse Saga. Your task is to craft a captivating, ongoing story for the user.

The user is currently at Level {{level}}. You can subtly weave this into the narrative (e.g., "As a Level {{level}} Miner, your skills were sharp...").

The story's theme is: {{theme}}.

This is the story so far:
{{#if history}}
    {{#each history}}
        Story: {{{this.part}}}
        User's Choice: {{{this.choice}}}
    {{/each}}
{{else}}
    This is the very beginning of the story. Start with an exciting introduction to set the scene.
{{/if}}

Your task is to generate the VERY NEXT part of the story based on the history. Keep it concise (2-4 sentences). The story part must end on a cliffhanger or point of decision.

You must provide EXACTLY TWO distinct, actionable choices for the user to continue the story.

Your response MUST be a valid JSON object with two keys:
1. "storyPart": A string containing the next part of the story.
2. "choices": An array of EXACTLY two strings, representing the choices for the user.
`,
});

const continueStoryFlow = ai.defineFlow(
  {
    name: 'continueStoryFlow',
    inputSchema: StoryInputSchema,
    outputSchema: StoryOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
